"""
üåê API —Å–µ—Ä–≤–µ—Ä –¥–ª—è CryptoWatch MEXC
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
"""

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from functools import wraps
import json
import os
import sys
from datetime import datetime, timedelta
import requests
from typing import Dict, Any, Optional
import threading
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ database.py
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import DatabaseManager
import requests

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'SECRET_KEY': 'cryptowatch_mexc_secret_2024',
    'DATABASE_PATH': 'data/users.db',
    'ENCRYPTION_KEY': 'cryptowatch_mexc_encryption_2024',
    'BOT_API_URL': 'http://localhost:8000',  # URL –±–æ—Ç–∞
    'BOT_API_KEY': 'bot_api_key_2024',
    'DEBUG': True,
    'BOT_API_TIMEOUT': 5  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_manager = DatabaseManager(
    db_path=CONFIG['DATABASE_PATH'],
    encryption_key=CONFIG['ENCRYPTION_KEY']
)

# –ö–æ–¥—ã –æ—à–∏–±–æ–∫
ERROR_CODES = {
    'AUTH_001': {'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'http_code': 404},
    'AUTH_002': {'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', 'http_code': 401},
    'AUTH_003': {'message': 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', 'http_code': 409},
    'AUTH_004': {'message': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω', 'http_code': 401},
    'AUTH_005': {'message': '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'http_code': 423},
    'AUTH_006': {'message': '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'http_code': 403},
    'BOT_001': {'message': '–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'http_code': 503},
    'BOT_002': {'message': '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –±–æ—Ç–∞', 'http_code': 401},
    'BOT_003': {'message': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è', 'http_code': 408},
    'DATA_001': {'message': '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'http_code': 404},
    'DATA_002': {'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö', 'http_code': 400},
    'SERVER_001': {'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'http_code': 500},
    'TIMEOUT': {'message': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è', 'http_code': 408}
}

def handle_error(error_code: str, custom_message: str = None) -> tuple:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –æ—Ç–≤–µ—Ç"""
    error_info = ERROR_CODES.get(error_code, {
        'message': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        'http_code': 500
    })
    
    response = {
        'success': False,
        'error': error_code,
        'message': custom_message or error_info['message'],
        'timestamp': datetime.now().isoformat()
    }
    
    return jsonify(response), error_info['http_code']

def require_auth(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        auth_header = request.headers.get('Authorization')
        
        if not auth_header or not auth_header.startswith('Bearer '):
            return handle_error('AUTH_004', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        
        token = auth_header.split(' ')[1]
        session_result = db_manager.validate_session(token)
        
        if not session_result['success']:
            return handle_error(session_result['error'], session_result['message'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request
        request.user = session_result['data']['user']
        request.session = session_result['data']['session']
        
        return f(*args, **kwargs)
    
    return decorated_function

def get_client_info() -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    user_agent = request.headers.get('User-Agent', '')
    return ip_address, user_agent

class BotConnector:
    """–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Å —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º"""
    
    def __init__(self, bot_url: str, api_key: str):
        self.bot_url = bot_url.rstrip('/')
        self.api_key = api_key
        self.timeout = CONFIG['BOT_API_TIMEOUT']
    
    def make_request(self, endpoint: str, method: str = 'GET', data: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É"""
        try:
            url = f"{self.bot_url}{endpoint}"
            headers = {
                'Content-Type': 'application/json'
            }
            
            print(f"ü§ñ –ó–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É: {method} {url}")
            
            if method == 'GET':
                response = requests.get(url, headers=headers, timeout=self.timeout)
            elif method == 'POST':
                response = requests.post(url, headers=headers, json=data, timeout=self.timeout)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            
            if response.status_code == 200:
                return {
                    'success': True,
                    'data': response.json()
                }
            else:
                return {
                    'success': False,
                    'error': 'BOT_001',
                    'message': f'–ë–æ—Ç –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}'
                }
                
        except requests.exceptions.Timeout:
            return {
                'success': False,
                'error': 'TIMEOUT',
                'message': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞'
            }
        except requests.exceptions.ConnectionError:
            return {
                'success': False,
                'error': 'BOT_001',
                'message': '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É'
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–æ—Ç—É: {e}")
            return {
                'success': False,
                'error': 'BOT_001',
                'message': '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –±–æ—Ç–æ–º'
            }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –±–æ—Ç–∞
bot_connector = BotConnector(CONFIG['BOT_API_URL'], CONFIG['BOT_API_KEY'])

# === –ú–ê–†–®–†–£–¢–´ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í ===

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return send_from_directory('.', 'index.html')

@app.route('/<path:filename>')
def static_files(filename):
    """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    return send_from_directory('.', filename)

# === –ú–ê–†–®–†–£–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===

@app.route('/api/auth/register', methods=['POST'])
def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        
        if not data:
            return handle_error('DATA_002', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['name', 'email', 'password']
        for field in required_fields:
            if not data.get(field):
                return handle_error('DATA_002', f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = db_manager.create_user(
            email=data['email'],
            password=data['password'],
            name=data['name'],
            telegram_id=data.get('telegram')
        )
        
        if not result['success']:
            return handle_error(result['error'], result['message'])
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        ip_address, user_agent = get_client_info()
        auth_result = db_manager.authenticate_user(
            email=data['email'],
            password=data['password'],
            ip_address=ip_address,
            user_agent=user_agent
        )
        
        if auth_result['success']:
            return jsonify({
                'success': True,
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
                'data': auth_result['data']
            })
        else:
            return jsonify({
                'success': True,
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥',
                'data': result['data']
            })
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return handle_error('SERVER_001', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')

@app.route('/api/auth/login', methods=['POST'])
def login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        
        if not data or not data.get('email') or not data.get('password'):
            return handle_error('DATA_002', 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã')
        
        ip_address, user_agent = get_client_info()
        
        result = db_manager.authenticate_user(
            email=data['email'],
            password=data['password'],
            ip_address=ip_address,
            user_agent=user_agent
        )
        
        if not result['success']:
            return handle_error(result['error'], result['message'])
        
        return jsonify({
            'success': True,
            'message': '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            'data': result['data']
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return handle_error('SERVER_001', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')

@app.route('/api/auth/logout', methods=['POST'])
@require_auth
def logout():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    try:
        auth_header = request.headers.get('Authorization')
        token = auth_header.split(' ')[1]
        
        result = db_manager.logout_user(token)
        
        if not result['success']:
            return handle_error(result['error'], result['message'])
        
        return jsonify({
            'success': True,
            'message': '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return handle_error('SERVER_001', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏')

@app.route('/api/auth/validate', methods=['GET'])
@require_auth
def validate_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
    return jsonify({
        'success': True,
        'data': {
            'user': request.user,
            'session': request.session
        }
    })

# === –ú–ê–†–®–†–£–¢–´ –î–ê–®–ë–û–†–î–ê ===

@app.route('/api/dashboard/user', methods=['GET'])
@require_auth
def get_user_profile():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return jsonify({
        'success': True,
        'data': {
            'user': request.user
        }
    })

@app.route('/api/dashboard/stats', methods=['GET'])
@require_auth
def get_user_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –±–æ—Ç–∞
        result = bot_connector.make_request('/api/stats')
        
        if result['success']:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
            stats = result['data']
        else:
            # Fallback –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            user_id = request.user['id']
            trading_data_result = db_manager.get_user_trading_data(user_id)
            
            if trading_data_result['success'] and 'daily_stats' in trading_data_result['data']:
                daily_data = trading_data_result['data']['daily_stats']['data']
                stats = {
                    'total_signals': daily_data.get('total_signals', 0),
                    'success_rate': daily_data.get('win_rate', 0.0),
                    'today_signals': daily_data.get('today_signals', 0),
                    'total_profit': daily_data.get('total_profit', 0.0),
                    'active_signals': daily_data.get('active_signals', 0)
                }
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                stats = {
                    'total_signals': 1247,
                    'success_rate': 87.3,
                    'today_signals': 23,
                    'total_profit': 2450.75,
                    'active_signals': 12
                }
        
        return jsonify({
            'success': True,
            'data': stats
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return handle_error('SERVER_001', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')

# === –ú–ê–†–®–†–£–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–û–¢–û–ú ===

@app.route('/api/bot/status', methods=['GET'])
@require_auth
def get_bot_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    result = bot_connector.make_request('/api/status')
    
    if not result['success']:
        return handle_error(result['error'], result['message'])
    
    return jsonify({
        'success': True,
        'data': result['data']
    })

@app.route('/api/bot/signals', methods=['GET'])
@require_auth
def get_bot_signals():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –±–æ—Ç–∞"""
    result = bot_connector.make_request('/api/signals')
    
    if not result['success']:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        demo_signals = [
            {
                'pair': 'BTC/USDT',
                'change': '+8.5%',
                'type': 'pump',
                'timestamp': int(time.time()) - 300,
                'quality': 'high'
            },
            {
                'pair': 'ETH/USDT',
                'change': '-6.2%',
                'type': 'dump',
                'timestamp': int(time.time()) - 600,
                'quality': 'medium'
            }
        ]
        
        return jsonify({
            'success': True,
            'data': {
                'signals': demo_signals,
                'demo': True,
                'message': '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
            }
        })
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    signals = result['data'].get('signals', [])
    formatted_signals = []
    
    for signal in signals:
        formatted_signals.append({
            'pair': signal.get('pair', 'UNKNOWN'),
            'change': signal.get('change', '+0.0%'),
            'type': signal.get('type', 'pump'),
            'timestamp': signal.get('timestamp', int(time.time())),
            'quality': signal.get('quality', 'medium'),
            'status': signal.get('status', 'active')
        })
    
    return jsonify({
        'success': True,
        'data': {
            'signals': formatted_signals,
            'demo': False
        }
    })

@app.route('/api/bot/trades', methods=['GET'])
@require_auth
def get_bot_trades():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –æ—Ç –±–æ—Ç–∞"""
    result = bot_connector.make_request('/api/trades')
    
    if not result['success']:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        demo_trades = [
            {
                'pair': 'BTC/USDT',
                'result': 'profit',
                'amount': '+$245.50',
                'timestamp': int(time.time()) - 3600
            },
            {
                'pair': 'ETH/USDT',
                'result': 'loss',
                'amount': '-$89.20',
                'timestamp': int(time.time()) - 7200
            }
        ]
        
        return jsonify({
            'success': True,
            'data': {
                'trades': demo_trades,
                'demo': True
            }
        })
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
    trades = result['data'].get('trades', [])
    formatted_trades = []
    
    for trade in trades:
        formatted_trades.append({
            'pair': trade.get('pair', 'UNKNOWN'),
            'result': trade.get('result', 'loss'),
            'amount': trade.get('amount', '0.00%'),
            'timestamp': trade.get('timestamp', int(time.time()))
        })
    
    return jsonify({
        'success': True,
        'data': {
            'trades': formatted_trades,
            'demo': False
        }
    })

@app.route('/api/bot/hot-coins', methods=['GET'])
@require_auth
def get_hot_coins():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –º–æ–Ω–µ—Ç –æ—Ç –±–æ—Ç–∞"""
    result = bot_connector.make_request('/api/hot-coins')
    
    if not result['success']:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        demo_coins = [
            {'symbol': 'DOGE', 'change': '+15.8%'},
            {'symbol': 'SHIB', 'change': '+12.4%'},
            {'symbol': 'PEPE', 'change': '+9.7%'},
            {'symbol': 'FLOKI', 'change': '+8.2%'}
        ]
        
        return jsonify({
            'success': True,
            'data': {
                'coins': demo_coins,
                'demo': True
            }
        })
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
    coins_data = result['data']
    formatted_coins = coins_data.get('coins', [])
    
    return jsonify({
        'success': True,
        'data': {
            'coins': formatted_coins,
            'demo': False
        }
    })

@app.route('/api/bot/analytics', methods=['GET'])
@require_auth
def get_bot_analytics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞"""
    result = bot_connector.make_request('/api/analytics')
    
    if not result['success']:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        chart_labels = []
        chart_data = []
        
        for i in range(7):
            date = datetime.now() - timedelta(days=6-i)
            chart_labels.append(date.strftime('%d.%m'))
            chart_data.append({
                'profit': round((i * 2.5 + 5) * (1 + (i % 3 - 1) * 0.2), 1),
                'accuracy': round(75 + i * 3 + (i % 2) * 5, 1)
            })
        
        demo_analytics = {
            'total_signals': 1247,
            'success_rate': 87.3,
            'today_signals': 23,
            'chart_data': {
                'labels': chart_labels,
                'data': chart_data
            }
        }
        
        return jsonify({
            'success': True,
            'data': {
                **demo_analytics,
                'demo': True
            }
        })
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
    analytics_data = result['data']
    
    return jsonify({
        'success': True,
        'data': {
            **analytics_data,
            'demo': False
        }
    })

# === –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ë–û–¢–ê ===

@app.route('/api/webhook/signal', methods=['POST'])
def receive_signal():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –±–æ—Ç–∞
        api_key = request.headers.get('X-API-Key')
        if api_key != CONFIG['BOT_API_KEY']:
            return handle_error('BOT_002', '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á')
        
        data = request.get_json()
        if not data:
            return handle_error('DATA_002', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞')
        
        print(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç –±–æ—Ç–∞: {data}")
        
        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        return jsonify({
            'success': True,
            'message': '–°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return handle_error('SERVER_001', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞')

@app.route('/api/webhook/trade-result', methods=['POST'])
def receive_trade_result():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –æ—Ç –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –±–æ—Ç–∞
        api_key = request.headers.get('X-API-Key')
        if api_key != CONFIG['BOT_API_KEY']:
            return handle_error('BOT_002', '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á')
        
        data = request.get_json()
        if not data:
            return handle_error('DATA_002', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
        
        print(f"üí∞ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –æ—Ç –±–æ—Ç–∞: {data}")
        
        # TODO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        return jsonify({
            'success': True,
            'message': '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        return handle_error('SERVER_001', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')

# === –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'success': True,
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'version': '1.0.0'
    })

@app.route('/api/error-codes', methods=['GET'])
def get_error_codes():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫"""
    return jsonify({
        'success': True,
        'data': ERROR_CODES
    })

# === –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò ===

def cleanup_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏"""
    try:
        print("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏...")
        db_manager.cleanup_expired_sessions()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")

def start_cleanup_task():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –±–µ–∑ daemon thread"""
    cleanup_task()
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ Flask
    if app:
        from threading import Timer
        timer = Timer(3600.0, start_cleanup_task)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        timer.start()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ===

@app.errorhandler(404)
def not_found(error):
    return handle_error('DATA_001', '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')

@app.errorhandler(500)
def internal_error(error):
    return handle_error('SERVER_001', '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ CryptoWatch MEXC...")
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {CONFIG['DATABASE_PATH']}")
    print(f"ü§ñ URL –±–æ—Ç–∞: {CONFIG['BOT_API_URL']}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –æ—á–∏—Å—Ç–∫—É
    start_cleanup_task()
    
    try:
        app.run(
            host='0.0.0.0',
            port=5000,
            debug=CONFIG['DEBUG'],
            threaded=True
        )
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞")
