/**
 * üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç CryptoWatch MEXC
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º
 */

class DashboardManager {
    constructor() {
        this.apiUrl = '/api/dashboard';
        this.botApiUrl = '/api/bot';
        this.currentUser = null;
        this.botStatus = 'checking';
        this.updateIntervals = {};
        this.chart = null;
        
        this.init();
    }

    async init() {
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (!this.checkAuth()) {
            return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.initElements();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.attachEventListeners();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.loadUserData();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        await this.checkBotStatus();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        this.initChart();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        await this.loadDashboardData();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.setupAutoRefresh();
        
        console.log('‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    checkAuth() {
        const authData = this.getAuthData();
        
        if (!authData || !authData.token || this.isTokenExpired(authData.expiresAt)) {
            console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
            window.location.href = 'auth.html';
            return false;
        }
        
        this.currentUser = authData.user;
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', this.currentUser.name);
        return true;
    }

    initElements() {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.userNameElement = document.getElementById('userName');
        this.welcomeUserNameElement = document.getElementById('welcomeUserName');
        this.userMenuToggle = document.getElementById('userMenuToggle');
        this.userDropdown = document.getElementById('userDropdown');
        this.logoutBtn = document.getElementById('logoutBtn');
        
        // –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        this.botStatusElement = document.getElementById('botStatus');
        this.botStatusDisplay = document.getElementById('botStatusDisplay');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.totalSignalsElement = document.getElementById('totalSignals');
        this.successRateElement = document.getElementById('successRate');
        this.todaySignalsElement = document.getElementById('todaySignals');
        
        // –°–ø–∏—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        this.signalsListElement = document.getElementById('signalsList');
        this.tradesListElement = document.getElementById('tradesList');
        this.hotCoinsListElement = document.getElementById('hotCoinsList');
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.refreshSignalsBtn = document.getElementById('refreshSignals');
        this.retryConnectionBtn = document.getElementById('retryConnection');
        
        // –ú–æ–¥–∞–ª—ã
        this.connectionModal = document.getElementById('connectionModal');
        this.closeConnectionModalBtn = document.getElementById('closeConnectionModal');
        
        // –ì—Ä–∞—Ñ–∏–∫
        this.chartCanvas = document.getElementById('performanceChart');
        this.chartPeriodSelect = document.getElementById('chartPeriod');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.notificationsEnabled = document.getElementById('notificationsEnabled');
        this.soundEnabled = document.getElementById('soundEnabled');
        this.signalThreshold = document.getElementById('signalThreshold');
        this.autoRefreshSelect = document.getElementById('autoRefresh');
    }

    attachEventListeners() {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        this.userMenuToggle?.addEventListener('click', () => this.toggleUserMenu());
        document.addEventListener('click', (e) => this.handleOutsideClick(e));
        this.logoutBtn?.addEventListener('click', () => this.handleLogout());
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.refreshSignalsBtn?.addEventListener('click', () => this.refreshSignals());
        this.retryConnectionBtn?.addEventListener('click', () => this.retryBotConnection());
        this.closeConnectionModalBtn?.addEventListener('click', () => this.hideConnectionModal());
        
        // –ì—Ä–∞—Ñ–∏–∫
        this.chartPeriodSelect?.addEventListener('change', (e) => this.updateChartPeriod(e.target.value));
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.notificationsEnabled?.addEventListener('change', () => this.updateSettings());
        this.soundEnabled?.addEventListener('change', () => this.updateSettings());
        this.signalThreshold?.addEventListener('change', () => this.updateSettings());
        this.autoRefreshSelect?.addEventListener('change', () => this.updateAutoRefresh());
    }

    async loadUserData() {
        try {
            console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            if (this.userNameElement) {
                this.userNameElement.textContent = this.currentUser.name;
            }
            if (this.welcomeUserNameElement) {
                this.welcomeUserNameElement.textContent = this.currentUser.name;
            }
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    async checkBotStatus() {
        try {
            console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...');
            
            const response = await this.makeBotRequest('/status');
            
            if (response.success) {
                this.botStatus = 'online';
                this.updateBotStatusDisplay('online', '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω', '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
                console.log('‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω');
            } else {
                throw new Error(response.error || 'Bot offline');
            }
        } catch (error) {
            console.error('‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            this.botStatus = 'offline';
            this.updateBotStatusDisplay('offline', '–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            this.showConnectionModal('TIMEOUT');
        }
    }

    async makeBotRequest(endpoint, data = null) {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–æ—Ç—É (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
        console.log(`ü§ñ –ó–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É: ${endpoint}`, data);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (90% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        if (Math.random() < 0.9) {
            return {
                success: true,
                data: this.generateMockBotData(endpoint)
            };
        } else {
            return {
                success: false,
                error: 'TIMEOUT',
                message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'
            };
        }
    }

    generateMockBotData(endpoint) {
        switch (endpoint) {
            case '/status':
                return {
                    status: 'online',
                    uptime: '2d 14h 32m',
                    lastSignal: '5 –º–∏–Ω –Ω–∞–∑–∞–¥',
                    activePairs: 24
                };
            
            case '/signals':
                return {
                    signals: [
                        {
                            pair: 'BTC/USDT',
                            change: '+8.5%',
                            type: 'pump',
                            timestamp: Date.now() - 300000,
                            quality: 'high'
                        },
                        {
                            pair: 'ETH/USDT',
                            change: '-6.2%',
                            type: 'dump',
                            timestamp: Date.now() - 600000,
                            quality: 'medium'
                        },
                        {
                            pair: 'ADA/USDT',
                            change: '+12.1%',
                            type: 'pump',
                            timestamp: Date.now() - 900000,
                            quality: 'high'
                        }
                    ]
                };
            
            case '/trades':
                return {
                    trades: [
                        {
                            pair: 'BTC/USDT',
                            result: 'profit',
                            amount: '+$245.50',
                            timestamp: Date.now() - 3600000
                        },
                        {
                            pair: 'ETH/USDT',
                            result: 'loss',
                            amount: '-$89.20',
                            timestamp: Date.now() - 7200000
                        }
                    ]
                };
            
            case '/hot-coins':
                return {
                    coins: [
                        { symbol: 'DOGE', change: '+15.8%' },
                        { symbol: 'SHIB', change: '+12.4%' },
                        { symbol: 'PEPE', change: '+9.7%' },
                        { symbol: 'FLOKI', change: '+8.2%' }
                    ]
                };
            
            case '/analytics':
                return {
                    totalSignals: 1247,
                    successRate: 87.3,
                    todaySignals: 23,
                    chartData: this.generateChartData()
                };
            
            default:
                return {};
        }
    }

    generateChartData() {
        const data = [];
        const labels = [];
        const now = new Date();
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date(now);
            date.setDate(date.getDate() - i);
            labels.push(date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' }));
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            data.push({
                profit: Math.random() * 20 - 5, // –æ—Ç -5% –¥–æ +15%
                accuracy: 70 + Math.random() * 25 // –æ—Ç 70% –¥–æ 95%
            });
        }
        
        return { labels, data };
    }

    async loadDashboardData() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [signalsData, tradesData, hotCoinsData, analyticsData] = await Promise.all([
                this.makeBotRequest('/signals'),
                this.makeBotRequest('/trades'),
                this.makeBotRequest('/hot-coins'),
                this.makeBotRequest('/analytics')
            ]);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (signalsData.success) {
                this.updateSignalsList(signalsData.data.signals);
            }
            
            if (tradesData.success) {
                this.updateTradesList(tradesData.data.trades);
            }
            
            if (hotCoinsData.success) {
                this.updateHotCoinsList(hotCoinsData.data.coins);
            }
            
            if (analyticsData.success) {
                this.updateAnalytics(analyticsData.data);
                this.updateChart(analyticsData.data.chartData);
            }
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    updateBotStatusDisplay(status, title, subtitle) {
        if (!this.botStatusElement || !this.botStatusDisplay) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ö–µ–¥–µ—Ä–µ
        const headerIndicator = this.botStatusElement.querySelector('.status-indicator');
        const headerText = this.botStatusElement.querySelector('.status-text');
        
        if (headerIndicator) {
            headerIndicator.className = `fas fa-circle status-indicator ${status}`;
        }
        if (headerText) {
            headerText.textContent = title;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const statusIcon = this.botStatusDisplay.querySelector('.status-icon');
        const statusTitle = this.botStatusDisplay.querySelector('.status-title');
        const statusSubtitle = this.botStatusDisplay.querySelector('.status-subtitle');
        
        if (statusIcon) {
            statusIcon.className = `status-icon ${status}`;
        }
        if (statusTitle) {
            statusTitle.textContent = title;
        }
        if (statusSubtitle) {
            statusSubtitle.textContent = subtitle;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞
        if (status === 'online') {
            const botData = this.generateMockBotData('/status');
            this.updateBotMetrics(botData);
        }
    }

    updateBotMetrics(data) {
        const uptimeElement = document.getElementById('botUptime');
        const lastSignalElement = document.getElementById('lastSignalTime');
        const activePairsElement = document.getElementById('activePairs');
        
        if (uptimeElement) uptimeElement.textContent = data.uptime || '--:--:--';
        if (lastSignalElement) lastSignalElement.textContent = data.lastSignal || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        if (activePairsElement) activePairsElement.textContent = data.activePairs || '0';
    }

    updateSignalsList(signals) {
        if (!this.signalsListElement) return;
        
        if (!signals || signals.length === 0) {
            this.signalsListElement.innerHTML = `
                <div class="signals-placeholder">
                    <i class="fas fa-satellite-dish"></i>
                    <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</p>
                </div>
            `;
            return;
        }
        
        const signalsHtml = signals.map(signal => `
            <div class="signal-item">
                <div class="signal-info">
                    <span class="signal-pair">${signal.pair}</span>
                    <span class="signal-time">${this.formatTime(signal.timestamp)}</span>
                </div>
                <div class="signal-details">
                    <span class="signal-change ${signal.type === 'pump' ? 'positive' : 'negative'}">
                        ${signal.change}
                    </span>
                    <span class="signal-quality">${this.getQualityBadge(signal.quality)}</span>
                </div>
            </div>
        `).join('');
        
        this.signalsListElement.innerHTML = signalsHtml;
    }

    updateTradesList(trades) {
        if (!this.tradesListElement) return;
        
        if (!trades || trades.length === 0) {
            this.tradesListElement.innerHTML = `
                <div class="trades-placeholder">
                    <i class="fas fa-exchange-alt"></i>
                    <p>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞</p>
                </div>
            `;
            return;
        }
        
        const tradesHtml = trades.map(trade => `
            <div class="trade-item ${trade.result}">
                <div class="trade-info">
                    <span class="trade-pair">${trade.pair}</span>
                    <span class="trade-time">${this.formatTime(trade.timestamp)}</span>
                </div>
                <div class="trade-result">
                    <span class="trade-amount ${trade.result === 'profit' ? 'positive' : 'negative'}">
                        ${trade.amount}
                    </span>
                </div>
            </div>
        `).join('');
        
        this.tradesListElement.innerHTML = tradesHtml;
    }

    updateHotCoinsList(coins) {
        if (!this.hotCoinsListElement) return;
        
        if (!coins || coins.length === 0) {
            this.hotCoinsListElement.innerHTML = `
                <div class="hot-coins-placeholder">
                    <i class="fas fa-fire"></i>
                    <p>–ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –º–æ–Ω–µ—Ç</p>
                </div>
            `;
            return;
        }
        
        const coinsHtml = coins.map(coin => `
            <div class="hot-coin-item">
                <span class="coin-symbol">${coin.symbol}</span>
                <span class="coin-change">${coin.change}</span>
            </div>
        `).join('');
        
        this.hotCoinsListElement.innerHTML = coinsHtml;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateTimeElement = document.getElementById('hotCoinsUpdate');
        if (updateTimeElement) {
            updateTimeElement.textContent = `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}`;
        }
    }

    updateAnalytics(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        if (this.totalSignalsElement) {
            this.animateValue(this.totalSignalsElement, data.totalSignals);
        }
        if (this.successRateElement) {
            this.animateValue(this.successRateElement, data.successRate, '%');
        }
        if (this.todaySignalsElement) {
            this.animateValue(this.todaySignalsElement, data.todaySignals);
        }
    }

    animateValue(element, endValue, suffix = '') {
        const startValue = parseInt(element.textContent) || 0;
        const duration = 2000;
        const range = endValue - startValue;
        const increment = range / (duration / 16);
        let current = startValue;
        
        const timer = setInterval(() => {
            current += increment;
            
            if ((increment > 0 && current >= endValue) || (increment < 0 && current <= endValue)) {
                current = endValue;
                clearInterval(timer);
            }
            
            element.textContent = Math.round(current) + suffix;
        }, 16);
    }

    initChart() {
        if (!this.chartCanvas) return;
        
        const ctx = this.chartCanvas.getContext('2d');
        
        this.chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: '–ü—Ä–∏–±—ã–ª—å (%)',
                    data: [],
                    borderColor: '#00D4FF',
                    backgroundColor: 'rgba(0, 212, 255, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4
                }, {
                    label: '–¢–æ—á–Ω–æ—Å—Ç—å (%)',
                    data: [],
                    borderColor: '#4ECDC4',
                    backgroundColor: 'rgba(78, 205, 196, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    updateChart(chartData) {
        if (!this.chart || !chartData) return;
        
        this.chart.data.labels = chartData.labels;
        this.chart.data.datasets[0].data = chartData.data.map(d => d.profit);
        this.chart.data.datasets[1].data = chartData.data.map(d => d.accuracy);
        this.chart.update();
    }

    setupAutoRefresh() {
        const refreshInterval = parseInt(this.autoRefreshSelect?.value || '60') * 1000;
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        Object.values(this.updateIntervals).forEach(interval => clearInterval(interval));
        this.updateIntervals = {};
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.updateIntervals.dashboard = setInterval(() => {
            this.loadDashboardData();
        }, refreshInterval);
        
        this.updateIntervals.botStatus = setInterval(() => {
            this.checkBotStatus();
        }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        console.log(`üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ ${refreshInterval / 1000} —Å–µ–∫`);
    }

    async refreshSignals() {
        const btn = this.refreshSignalsBtn;
        if (!btn) return;
        
        const originalIcon = btn.querySelector('i').className;
        btn.querySelector('i').className = 'fas fa-sync-alt fa-spin';
        btn.disabled = true;
        
        try {
            await this.loadDashboardData();
            this.showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
        } finally {
            btn.querySelector('i').className = originalIcon;
            btn.disabled = false;
        }
    }

    async retryBotConnection() {
        this.hideConnectionModal();
        this.updateBotStatusDisplay('checking', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        await this.checkBotStatus();
    }

    toggleUserMenu() {
        if (!this.userDropdown) return;
        this.userDropdown.classList.toggle('show');
    }

    handleOutsideClick(e) {
        if (!this.userDropdown) return;
        
        if (!e.target.closest('.user-menu')) {
            this.userDropdown.classList.remove('show');
        }
    }

    handleLogout() {
        console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...');
        this.clearAuthData();
        this.showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'info');
        setTimeout(() => {
            window.location.href = 'index.html';
        }, 1500);
    }

    updateSettings() {
        const settings = {
            notifications: this.notificationsEnabled?.checked || false,
            sound: this.soundEnabled?.checked || false,
            signalThreshold: this.signalThreshold?.value || '7'
        };
        
        localStorage.setItem('cryptowatch_settings', JSON.stringify(settings));
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settings);
        this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    }

    updateAutoRefresh() {
        this.setupAutoRefresh();
        this.showNotification('–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω', 'info');
    }

    updateChartPeriod(period) {
        console.log(`üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞: ${period}`);
        // TODO: –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        this.showNotification(`–ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${period}`, 'info');
    }

    showConnectionModal(errorCode) {
        if (!this.connectionModal) return;
        
        const errorCodeElement = document.getElementById('errorCode');
        if (errorCodeElement) {
            errorCodeElement.textContent = errorCode;
        }
        
        this.connectionModal.classList.add('show');
    }

    hideConnectionModal() {
        if (!this.connectionModal) return;
        this.connectionModal.classList.remove('show');
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    formatTime(timestamp) {
        const now = Date.now();
        const diff = now - timestamp;
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        
        if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
        return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
    }

    getQualityBadge(quality) {
        const badges = {
            high: 'üü¢ –í—ã—Å–æ–∫–æ–µ',
            medium: 'üü° –°—Ä–µ–¥–Ω–µ–µ',
            low: 'üî¥ –ù–∏–∑–∫–æ–µ'
        };
        return badges[quality] || '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    // –†–∞–±–æ—Ç–∞ —Å localStorage
    getAuthData() {
        try {
            return JSON.parse(localStorage.getItem('cryptowatch_auth'));
        } catch {
            return null;
        }
    }

    clearAuthData() {
        localStorage.removeItem('cryptowatch_auth');
    }

    isTokenExpired(expiresAt) {
        return Date.now() > expiresAt;
    }

    showNotification(message, type = 'info') {
        if (typeof showNotification === 'function') {
            showNotification(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    destroy() {
        Object.values(this.updateIntervals).forEach(interval => clearInterval(interval));
        if (this.chart) {
            this.chart.destroy();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞...');
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞
    window.dashboardManager = new DashboardManager();
    
    console.log('‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    if (window.dashboardManager) {
        window.dashboardManager.destroy();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DashboardManager;
}
