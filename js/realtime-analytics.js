/**
 * üìä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
 */

class RealTimeAnalytics {
    constructor() {
        this.botAPI = 'http://localhost:8000/api';
        this.fallbackAPI = '/api/bot';
        this.updateInterval = 15000; // 15 —Å–µ–∫—É–Ω–¥
        this.charts = {};
        this.metrics = {};
        this.isConnected = false;
        this.retryCount = 0;
        this.maxRetries = 5;
        
        // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.onDataUpdate = null;
        this.onConnectionChange = null;
        
        this.init();
    }

    /**
     * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        await this.checkConnection();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await this.loadInitialData();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.startRealTimeUpdates();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        this.initializeCharts();
        
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    /**
     * üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
     */
    async checkConnection() {
        try {
            const response = await fetch(`${this.botAPI}/health`, {
                method: 'GET',
                timeout: 5000
            });
            
            if (response.ok) {
                this.isConnected = true;
                this.retryCount = 0;
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                
                if (this.onConnectionChange) {
                    this.onConnectionChange(true);
                }
                
                return true;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback API');
        }
        
        this.isConnected = false;
        if (this.onConnectionChange) {
            this.onConnectionChange(false);
        }
        
        return false;
    }

    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [stats, signals, trades, analytics] = await Promise.all([
                this.fetchStats(),
                this.fetchSignals(),
                this.fetchTrades(),
                this.fetchAnalytics()
            ]);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateMetrics(stats);
            this.updateSignalsDisplay(signals);
            this.updateTradesDisplay(trades);
            this.updateChartsData(analytics);
            
            console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.handleError(error);
        }
    }

    /**
     * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async fetchStats() {
        const apiUrl = this.isConnected ? `${this.botAPI}/stats` : `${this.fallbackAPI}/stats`;
        
        try {
            const response = await fetch(apiUrl, {
                headers: this.getHeaders()
            });
            
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const data = await response.json();
            return {
                success: true,
                data: data.data || data,
                source: this.isConnected ? 'bot' : 'fallback'
            };
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                success: false,
                data: this.getDemoStats(),
                source: 'demo'
            };
        }
    }

    /**
     * üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    async fetchSignals() {
        const apiUrl = this.isConnected ? `${this.botAPI}/signals` : `${this.fallbackAPI}/signals`;
        
        try {
            const response = await fetch(apiUrl, {
                headers: this.getHeaders()
            });
            
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const data = await response.json();
            return {
                success: true,
                data: data.signals || data.data?.signals || [],
                source: this.isConnected ? 'bot' : 'fallback'
            };
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:', error);
            return {
                success: false,
                data: this.getDemoSignals(),
                source: 'demo'
            };
        }
    }

    /**
     * üíπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
     */
    async fetchTrades() {
        const apiUrl = this.isConnected ? `${this.botAPI}/trades` : `${this.fallbackAPI}/trades`;
        
        try {
            const response = await fetch(apiUrl, {
                headers: this.getHeaders()
            });
            
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const data = await response.json();
            return {
                success: true,
                data: data.trades || data.data?.trades || [],
                source: this.isConnected ? 'bot' : 'fallback'
            };
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:', error);
            return {
                success: false,
                data: this.getDemoTrades(),
                source: 'demo'
            };
        }
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async fetchAnalytics() {
        const apiUrl = this.isConnected ? `${this.botAPI}/analytics` : `${this.fallbackAPI}/analytics`;
        
        try {
            const response = await fetch(apiUrl, {
                headers: this.getHeaders()
            });
            
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const data = await response.json();
            return {
                success: true,
                data: data.data || data,
                source: this.isConnected ? 'bot' : 'fallback'
            };
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            return {
                success: false,
                data: this.getDemoAnalytics(),
                source: 'demo'
            };
        }
    }

    /**
     * üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startRealTimeUpdates() {
        console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (${this.updateInterval/1000}—Å)`);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
        }
        
        this.updateTimer = setInterval(async () => {
            await this.updateAllData();
        }, this.updateInterval);
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async updateAllData() {
        try {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if (!this.isConnected) {
                await this.checkConnection();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const [stats, signals, trades, analytics] = await Promise.all([
                this.fetchStats(),
                this.fetchSignals(),
                this.fetchTrades(),
                this.fetchAnalytics()
            ]);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateMetrics(stats);
            this.updateSignalsDisplay(signals);
            this.updateTradesDisplay(trades);
            this.updateChartsData(analytics);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.updateConnectionStatus();
            
            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.onDataUpdate) {
                this.onDataUpdate({
                    stats, signals, trades, analytics,
                    timestamp: new Date(),
                    connected: this.isConnected
                });
            }
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this.handleError(error);
        }
    }

    /**
     * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    updateMetrics(statsResult) {
        if (!statsResult.success) return;
        
        const stats = statsResult.data;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        this.updateElement('winRateValue', `${stats.success_rate || 0}%`);
        this.updateElement('avgMultiplierValue', `${stats.avg_profit || 0}%`);
        this.updateElement('activeSignalsValue', stats.active_signals || 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        this.updateElement('totalSignalsValue', stats.total_signals || 0);
        this.updateElement('totalProfitValue', `${stats.total_profit || 0}%`);
        this.updateElement('todaySignalsValue', stats.today_signals || 0);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        this.metrics = stats;
        
        console.log(`üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–∏—Å—Ç–æ—á–Ω–∏–∫: ${statsResult.source})`);
    }

    /**
     * üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    updateSignalsDisplay(signalsResult) {
        if (!signalsResult.success) return;
        
        const signals = signalsResult.data;
        const container = document.getElementById('signalsContainer');
        
        if (!container) return;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals.slice(0, 5).forEach(signal => {
            const signalElement = this.createSignalElement(signal);
            container.appendChild(signalElement);
        });
        
        console.log(`üì° –°–∏–≥–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${signals.length} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${signalsResult.source})`);
    }

    /**
     * üíπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
     */
    updateTradesDisplay(tradesResult) {
        if (!tradesResult.success) return;
        
        const trades = tradesResult.data;
        const container = document.getElementById('tradesContainer');
        
        if (!container) return;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏
        trades.slice(0, 10).forEach(trade => {
            const tradeElement = this.createTradeElement(trade);
            container.appendChild(tradeElement);
        });
        
        console.log(`üíπ –°–¥–µ–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${trades.length} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${tradesResult.source})`);
    }

    /**
     * üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    updateChartsData(analyticsResult) {
        if (!analyticsResult.success) return;
        
        const analytics = analyticsResult.data;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (analytics.chart_data && this.charts.performance) {
            this.updatePerformanceChart(analytics.chart_data);
        }
        
        console.log(`üìà –ì—Ä–∞—Ñ–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–∏—Å—Ç–æ—á–Ω–∏–∫: ${analyticsResult.source})`);
    }

    /**
     * üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    initializeCharts() {
        // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const performanceCtx = document.getElementById('performanceChart');
        if (performanceCtx) {
            this.charts.performance = new Chart(performanceCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '–ü—Ä–∏–±—ã–ª—å (%)',
                        data: [],
                        borderColor: '#00ff88',
                        backgroundColor: 'rgba(0, 255, 136, 0.1)',
                        tension: 0.4,
                        fill: true
                    }, {
                        label: '–¢–æ—á–Ω–æ—Å—Ç—å (%)',
                        data: [],
                        borderColor: '#00d4ff',
                        backgroundColor: 'rgba(0, 212, 255, 0.1)',
                        tension: 0.4,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π)'
                        },
                        legend: {
                            display: true
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '–ó–Ω–∞—á–µ–Ω–∏–µ'
                            }
                        }
                    },
                    animation: {
                        duration: 1000
                    }
                }
            });
        }
    }

    /**
     * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    updatePerformanceChart(chartData) {
        if (!this.charts.performance || !chartData) return;
        
        const chart = this.charts.performance;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        chart.data.labels = chartData.labels || [];
        
        if (chartData.data) {
            // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–±—ã–ª–∏
            const profitData = chartData.data.map(item => item.profit || 0);
            chart.data.datasets[0].data = profitData;
            
            // –î–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
            const accuracyData = chartData.data.map(item => item.accuracy || 0);
            chart.data.datasets[1].data = accuracyData;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart.update('active');
    }

    /**
     * üì° –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞
     */
    createSignalElement(signal) {
        const div = document.createElement('div');
        div.className = 'signal-item';
        
        const typeClass = signal.type === 'pump' ? 'success' : signal.type === 'dump' ? 'danger' : 'info';
        const timeAgo = this.getTimeAgo(signal.timestamp);
        
        div.innerHTML = `
            <div class="signal-header">
                <span class="signal-pair">${signal.pair}</span>
                <span class="signal-change ${typeClass}">${signal.change}</span>
            </div>
            <div class="signal-meta">
                <span class="signal-time">${timeAgo}</span>
                <span class="signal-quality">${signal.quality || 'medium'}</span>
                <span class="signal-status ${signal.status || 'active'}">${signal.status || 'active'}</span>
            </div>
        `;
        
        return div;
    }

    /**
     * üíπ –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–¥–µ–ª–∫–∏
     */
    createTradeElement(trade) {
        const div = document.createElement('div');
        div.className = 'trade-item';
        
        const resultClass = trade.result === 'profit' ? 'success' : 'danger';
        const timeAgo = this.getTimeAgo(trade.timestamp);
        
        div.innerHTML = `
            <div class="trade-header">
                <span class="trade-pair">${trade.pair}</span>
                <span class="trade-result ${resultClass}">${trade.amount}</span>
            </div>
            <div class="trade-meta">
                <span class="trade-time">${timeAgo}</span>
                <span class="trade-type">${trade.result}</span>
            </div>
        `;
        
        return div;
    }

    /**
     * üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    updateConnectionStatus() {
        const statusElement = document.getElementById('connectionStatus');
        if (!statusElement) return;
        
        if (this.isConnected) {
            statusElement.className = 'connection-status connected';
            statusElement.innerHTML = 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–æ—Ç—É';
        } else {
            statusElement.className = 'connection-status disconnected';
            statusElement.innerHTML = 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        }
    }

    /**
     * üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    getHeaders() {
        const headers = {
            'Content-Type': 'application/json'
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        const token = localStorage.getItem('auth_token');
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        }
        
        return headers;
    }

    getTimeAgo(timestamp) {
        const now = Date.now();
        const diff = now - (timestamp * 1000);
        const minutes = Math.floor(diff / 60000);
        
        if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (minutes < 60) return `${minutes}–º –Ω–∞–∑–∞–¥`;
        
        const hours = Math.floor(minutes / 60);
        if (hours < 24) return `${hours}—á –Ω–∞–∑–∞–¥`;
        
        const days = Math.floor(hours / 24);
        return `${days}–¥ –Ω–∞–∑–∞–¥`;
    }

    handleError(error) {
        this.retryCount++;
        
        if (this.retryCount <= this.maxRetries) {
            console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä –ø–æ–ø—ã—Ç–∫–∏ ${this.retryCount}/${this.maxRetries}...`);
            setTimeout(() => this.updateAllData(), 5000);
        } else {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫');
            this.retryCount = 0;
        }
    }

    /**
     * üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    getDemoStats() {
        return {
            total_signals: 1247,
            success_rate: 87.3,
            today_signals: 23,
            total_profit: 2450.75,
            active_signals: 12,
            avg_profit: 3.2
        };
    }

    getDemoSignals() {
        return [
            { pair: 'BTC', change: '+8.5%', type: 'pump', timestamp: Date.now()/1000 - 300, quality: 'high', status: 'active' },
            { pair: 'ETH', change: '-6.2%', type: 'dump', timestamp: Date.now()/1000 - 600, quality: 'medium', status: 'active' }
        ];
    }

    getDemoTrades() {
        return [
            { pair: 'BTC', result: 'profit', amount: '+$245.50', timestamp: Date.now()/1000 - 3600 },
            { pair: 'ETH', result: 'loss', amount: '-$89.20', timestamp: Date.now()/1000 - 7200 }
        ];
    }

    getDemoAnalytics() {
        const labels = [];
        const data = [];
        
        for (let i = 0; i < 7; i++) {
            const date = new Date();
            date.setDate(date.getDate() - (6 - i));
            labels.push(date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' }));
            data.push({
                profit: Math.round((i * 2.5 + 5) * (1 + (i % 3 - 1) * 0.2) * 10) / 10,
                accuracy: Math.round(75 + i * 3 + (i % 2) * 5)
            });
        }
        
        return {
            chart_data: { labels, data }
        };
    }

    /**
     * üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    stop() {
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
            this.updateTimer = null;
        }
        
        console.log('‚èπÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.realTimeAnalytics = new RealTimeAnalytics();
