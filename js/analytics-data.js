/**
 * üìä Analytics Data Manager
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ trade_results.json –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */

class AnalyticsDataManager {
    constructor() {
        this.tradeData = null;
        this.cachedMetrics = null;
        this.lastUpdateTime = null;
    }

    /**
     * üîÑ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ trade_results.json
     */
    async loadTradeResults() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            console.log('üìç –¢–µ–∫—É—â–∏–π URL:', window.location.href);
            
            // –í production —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
            // –î–ª—è GitHub Pages –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ñ–∞–π–ª—É
            const response = await fetch('trade_results.json?t=' + Date.now());
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            this.tradeData = await response.json();
            this.lastUpdateTime = new Date();
            
            console.log('‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                activeSignals: Object.keys(this.tradeData.active_signals || {}).length,
                completedTrades: (this.tradeData.completed_trades || []).length
            });

            return this.tradeData;
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return this.getFallbackData();
        }
    }

    /**
     * üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    calculateMetrics() {
        if (!this.tradeData) {
            return this.getFallbackMetrics();
        }

        const { active_signals = {}, completed_trades = [] } = this.tradeData;
        
        // –£—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        const successfulTrades = completed_trades.filter(trade => trade.success === true);
        const failedTrades = completed_trades.filter(trade => trade.success === false);
        
        console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
        console.log('  - –í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:', completed_trades.length);
        console.log('  - –£—Å–ø–µ—à–Ω—ã—Ö:', successfulTrades.length);
        console.log('  - –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:', failedTrades.length);
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalTrades = completed_trades.length;
        const winRate = totalTrades > 0 ? (successfulTrades.length / totalTrades * 100) : 0;
        console.log('  - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:', winRate.toFixed(1) + '%');
        
        // –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
        const totalPnL = completed_trades.reduce((sum, trade) => sum + (trade.pnl_percent || 0), 0);
        const avgPnL = totalTrades > 0 ? totalPnL / totalTrades : 0;
        const avgProfit = successfulTrades.length > 0 ? 
            successfulTrades.reduce((sum, trade) => sum + trade.pnl_percent, 0) / successfulTrades.length : 0;
        
        // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        const activeSignalsCount = Object.keys(active_signals).length;
        const activeSignalsWithTargets = Object.values(active_signals).filter(
            signal => signal.hit_targets && signal.hit_targets.length > 0
        ).length;
        
        // –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
        const qualityDistribution = this.getQualityDistribution(completed_trades, active_signals);
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        const recentTrades = this.getRecentTrades(completed_trades, 7);
        const recentWinRate = recentTrades.length > 0 ? 
            (recentTrades.filter(t => t.success).length / recentTrades.length * 100) : winRate;

        return {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            winRate: Math.round(winRate * 10) / 10,
            avgMultiplier: avgProfit > 0 ? Math.round((avgProfit / 100 + 1) * 10) / 10 : 1.0,
            activeSignals: activeSignalsCount,
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            totalTrades,
            successfulTrades: successfulTrades.length,
            failedTrades: failedTrades.length,
            totalPnL: Math.round(totalPnL * 100) / 100,
            avgPnL: Math.round(avgPnL * 100) / 100,
            avgProfit: Math.round(avgProfit * 100) / 100,
            activeSignalsWithTargets,
            
            // –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
            qualityDistribution,
            
            // –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            recentWinRate: Math.round(recentWinRate * 10) / 10,
            recentTrades: recentTrades.length,
            
            // –ú–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            lastUpdate: this.lastUpdateTime,
            dataHealth: this.assessDataHealth()
        };
    }

    /**
     * üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    getQualityDistribution(completedTrades, activeSignals) {
        const allSignals = [
            ...completedTrades,
            ...Object.values(activeSignals)
        ];

        const distribution = allSignals.reduce((acc, signal) => {
            const quality = signal.quality || '–ù–ï–ò–ó–í–ï–°–¢–ù–û';
            acc[quality] = (acc[quality] || 0) + 1;
            return acc;
        }, {});

        return distribution;
    }

    /**
     * üìÖ –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π)
     */
    getRecentTrades(trades, days = 7) {
        const cutoffTime = Date.now() / 1000 - (days * 24 * 60 * 60);
        return trades.filter(trade => 
            trade.completed_at && trade.completed_at > cutoffTime
        );
    }

    /**
     * üè• –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
     */
    assessDataHealth() {
        if (!this.tradeData) return 'poor';
        
        const { active_signals = {}, completed_trades = [] } = this.tradeData;
        const totalSignals = Object.keys(active_signals).length + completed_trades.length;
        
        if (totalSignals === 0) return 'poor';
        if (totalSignals < 10) return 'fair';
        if (totalSignals < 50) return 'good';
        return 'excellent';
    }

    /**
     * üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    generateChartData(days = 30) {
        if (!this.tradeData) {
            return this.getFallbackChartData();
        }

        const { completed_trades = [] } = this.tradeData;
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –¥–Ω—è–º
        const dailyData = this.groupTradesByDay(completed_trades, days);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
        let cumulativePnL = 0;
        const labels = [];
        const profitData = [];
        const winRateData = [];
        
        for (let i = days - 1; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            const dateKey = date.toISOString().split('T')[0];
            
            const dayTrades = dailyData[dateKey] || [];
            const dayPnL = dayTrades.reduce((sum, trade) => sum + (trade.pnl_percent || 0), 0);
            cumulativePnL += dayPnL;
            
            const dayWinRate = dayTrades.length > 0 ? 
                (dayTrades.filter(t => t.success).length / dayTrades.length * 100) : 0;
            
            labels.push(date.toLocaleDateString('ru-RU', { month: 'short', day: 'numeric' }));
            profitData.push(Math.round(cumulativePnL * 100) / 100);
            winRateData.push(Math.round(dayWinRate * 10) / 10);
        }

        return {
            labels,
            datasets: [
                {
                    label: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (%)',
                    data: profitData,
                    borderColor: '#3B82F6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    fill: true,
                    tension: 0.4,
                    yAxisID: 'y'
                },
                {
                    label: '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ (%)',
                    data: winRateData,
                    borderColor: '#10B981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    fill: false,
                    tension: 0.4,
                    yAxisID: 'y1'
                }
            ]
        };
    }

    /**
     * üìÖ –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏ –ø–æ –¥–Ω—è–º
     */
    groupTradesByDay(trades, days) {
        const grouped = {};
        
        trades.forEach(trade => {
            if (!trade.completed_at) return;
            
            const tradeDate = new Date(trade.completed_at * 1000);
            const dateKey = tradeDate.toISOString().split('T')[0];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - days);
            
            if (tradeDate >= cutoffDate) {
                if (!grouped[dateKey]) grouped[dateKey] = [];
                grouped[dateKey].push(trade);
            }
        });
        
        return grouped;
    }

    /**
     * üé≤ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
     */
    getFallbackData() {
        return {
            active_signals: {},
            completed_trades: Array.from({ length: 20 }, (_, i) => ({
                symbol: `TEST${i}_USDT`,
                pnl_percent: (Math.random() - 0.4) * 15, // -6% –¥–æ +9%
                success: Math.random() > 0.3, // 70% —É—Å–ø–µ—Ö
                quality: ['–û–¢–õ–ò–ß–ù–´–ô', '–•–û–†–û–®–ò–ô', '–°–†–ï–î–ù–ò–ô'][Math.floor(Math.random() * 3)],
                completed_at: Date.now() / 1000 - Math.random() * 7 * 24 * 60 * 60 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            }))
        };
    }

    /**
     * üìä –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    getFallbackMetrics() {
        return {
            winRate: 72.5,
            avgMultiplier: 2.1,
            activeSignals: 15,
            totalTrades: 20,
            successfulTrades: 14,
            failedTrades: 6,
            totalPnL: 45.8,
            avgPnL: 2.29,
            avgProfit: 6.8,
            activeSignalsWithTargets: 8,
            qualityDistribution: {
                '–û–¢–õ–ò–ß–ù–´–ô': 3,
                '–•–û–†–û–®–ò–ô': 8,
                '–°–†–ï–î–ù–ò–ô': 9
            },
            recentWinRate: 75.0,
            recentTrades: 12,
            lastUpdate: new Date(),
            dataHealth: 'good'
        };
    }

    /**
     * üìà –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    getFallbackChartData() {
        const labels = [];
        const profitData = [];
        const winRateData = [];
        
        let cumulativeProfit = 0;
        
        for (let i = 29; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            
            const dailyProfit = (Math.random() - 0.4) * 3; // -1.2% –¥–æ +1.8% –≤ –¥–µ–Ω—å
            cumulativeProfit += dailyProfit;
            
            const winRate = 60 + Math.random() * 30; // 60-90%
            
            labels.push(date.toLocaleDateString('ru-RU', { month: 'short', day: 'numeric' }));
            profitData.push(Math.round(cumulativeProfit * 100) / 100);
            winRateData.push(Math.round(winRate * 10) / 10);
        }

        return {
            labels,
            datasets: [
                {
                    label: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (%)',
                    data: profitData,
                    borderColor: '#3B82F6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    fill: true,
                    tension: 0.4,
                    yAxisID: 'y'
                },
                {
                    label: '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ (%)',
                    data: winRateData,
                    borderColor: '#10B981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    fill: false,
                    tension: 0.4,
                    yAxisID: 'y1'
                }
            ]
        };
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
     */
    async refresh() {
        await this.loadTradeResults();
        this.cachedMetrics = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
        return this.calculateMetrics();
    }

    /**
     * üìä –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–≤–µ–∂–∏–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    getMetrics() {
        if (!this.cachedMetrics) {
            this.cachedMetrics = this.calculateMetrics();
        }
        return this.cachedMetrics;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.AnalyticsDataManager = AnalyticsDataManager;
