/**
 * üîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ CryptoWatch MEXC
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

class AuthManager {
    constructor() {
        this.apiUrl = '/api/auth'; // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.currentUser = null;
        this.isLoading = false;
        
        this.init();
    }

    init() {
        console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.initElements();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.attachEventListeners();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        this.checkExistingSession();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º
        this.initFormValidation();
        
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    initElements() {
        // –í–∫–ª–∞–¥–∫–∏
        this.loginTab = document.querySelector('[data-tab="login"]');
        this.registerTab = document.querySelector('[data-tab="register"]');
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ñ–æ—Ä–º
        this.loginForm = document.getElementById('login-form');
        this.registerForm = document.getElementById('register-form');
        
        // –§–æ—Ä–º—ã
        this.loginFormElement = document.getElementById('loginForm');
        this.registerFormElement = document.getElementById('registerForm');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
        this.loadingOverlay = document.getElementById('loadingOverlay');
        
        // –ö–Ω–æ–ø–∫–∏
        this.telegramAuthBtn = document.getElementById('telegramAuth');
        this.passwordToggles = document.querySelectorAll('.password-toggle');
    }

    attachEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        this.loginTab?.addEventListener('click', () => this.switchTab('login'));
        this.registerTab?.addEventListener('click', () => this.switchTab('register'));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º
        this.loginFormElement?.addEventListener('submit', (e) => this.handleLogin(e));
        this.registerFormElement?.addEventListener('submit', (e) => this.handleRegister(e));
        
        // Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        this.telegramAuthBtn?.addEventListener('click', () => this.handleTelegramAuth());
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –ø–∞—Ä–æ–ª–µ–π
        this.passwordToggles.forEach(toggle => {
            toggle.addEventListener('click', () => this.togglePassword(toggle));
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        const registerPassword = document.getElementById('registerPassword');
        registerPassword?.addEventListener('input', (e) => this.checkPasswordStrength(e.target.value));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        const confirmPassword = document.getElementById('confirmPassword');
        confirmPassword?.addEventListener('input', (e) => this.validatePasswordConfirmation());
    }

    switchTab(tab) {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tab}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.auth-tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.auth-form-container').forEach(c => c.classList.remove('active'));
        
        if (tab === 'login') {
            this.loginTab.classList.add('active');
            this.loginForm.classList.add('active');
        } else {
            this.registerTab.classList.add('active');
            this.registerForm.classList.add('active');
        }
        
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
        this.clearFormErrors();
    }

    async handleLogin(e) {
        e.preventDefault();
        
        if (this.isLoading) return;
        
        console.log('üîë –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞...');
        
        const formData = new FormData(e.target);
        const loginData = {
            email: formData.get('email'),
            password: formData.get('password'),
            remember: formData.get('rememberMe') === 'on'
        };
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateLoginForm(loginData)) {
            return;
        }
        
        this.setLoading(true);
        
        try {
            const response = await this.makeAuthRequest('/login', loginData);
            
            if (response.success) {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
                this.handleAuthSuccess(response.data);
            } else {
                this.handleAuthError(response.error);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            this.handleAuthError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        } finally {
            this.setLoading(false);
        }
    }

    async handleRegister(e) {
        e.preventDefault();
        
        if (this.isLoading) return;
        
        console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
        
        const formData = new FormData(e.target);
        const registerData = {
            name: formData.get('name'),
            email: formData.get('email'),
            password: formData.get('password'),
            confirmPassword: formData.get('confirmPassword'),
            telegram: formData.get('telegram') || null,
            agreeTerms: formData.get('agreeTerms') === 'on'
        };
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateRegisterForm(registerData)) {
            return;
        }
        
        this.setLoading(true);
        
        try {
            const response = await this.makeAuthRequest('/register', registerData);
            
            if (response.success) {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
                this.handleAuthSuccess(response.data);
            } else {
                this.handleAuthError(response.error);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            this.handleAuthError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        } finally {
            this.setLoading(false);
        }
    }

    async makeAuthRequest(endpoint, data) {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${endpoint}`, data);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if (endpoint === '/login') {
            return this.simulateLogin(data);
        } else if (endpoint === '/register') {
            return this.simulateRegister(data);
        }
        
        throw new Error('Unknown endpoint');
    }

    simulateLogin(data) {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const users = this.getStoredUsers();
        const user = users.find(u => u.email === data.email);
        
        if (!user) {
            return {
                success: false,
                error: 'AUTH_001', // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
        if (user.password !== this.hashPassword(data.password)) {
            return {
                success: false,
                error: 'AUTH_002', // –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
            };
        }
        
        return {
            success: true,
            data: {
                user: {
                    id: user.id,
                    name: user.name,
                    email: user.email,
                    telegram: user.telegram,
                    createdAt: user.createdAt
                },
                token: this.generateToken(user.id),
                expiresIn: data.remember ? 30 * 24 * 60 * 60 : 24 * 60 * 60 // 30 –¥–Ω–µ–π –∏–ª–∏ 1 –¥–µ–Ω—å
            }
        };
    }

    simulateRegister(data) {
        const users = this.getStoredUsers();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (users.find(u => u.email === data.email)) {
            return {
                success: false,
                error: 'AUTH_003', // Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            };
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
            id: Date.now().toString(),
            name: data.name,
            email: data.email,
            password: this.hashPassword(data.password),
            telegram: data.telegram,
            createdAt: new Date().toISOString(),
            isActive: true
        };
        
        users.push(newUser);
        this.saveUsers(users);
        
        return {
            success: true,
            data: {
                user: {
                    id: newUser.id,
                    name: newUser.name,
                    email: newUser.email,
                    telegram: newUser.telegram,
                    createdAt: newUser.createdAt
                },
                token: this.generateToken(newUser.id),
                expiresIn: 24 * 60 * 60 // 1 –¥–µ–Ω—å
            }
        };
    }

    validateLoginForm(data) {
        let isValid = true;
        
        // Email
        if (!data.email || !this.isValidEmail(data.email)) {
            this.showFieldError('loginEmailError', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            isValid = false;
        } else {
            this.hideFieldError('loginEmailError');
        }
        
        // –ü–∞—Ä–æ–ª—å
        if (!data.password || data.password.length < 6) {
            this.showFieldError('loginPasswordError', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
            isValid = false;
        } else {
            this.hideFieldError('loginPasswordError');
        }
        
        return isValid;
    }

    validateRegisterForm(data) {
        let isValid = true;
        
        // –ò–º—è
        if (!data.name || data.name.trim().length < 2) {
            this.showFieldError('registerNameError', '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            isValid = false;
        } else {
            this.hideFieldError('registerNameError');
        }
        
        // Email
        if (!data.email || !this.isValidEmail(data.email)) {
            this.showFieldError('registerEmailError', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            isValid = false;
        } else {
            this.hideFieldError('registerEmailError');
        }
        
        // –ü–∞—Ä–æ–ª—å
        const passwordStrength = this.getPasswordStrength(data.password);
        if (passwordStrength === 'weak' || !data.password) {
            this.showFieldError('registerPasswordError', '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã');
            isValid = false;
        } else {
            this.hideFieldError('registerPasswordError');
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        if (data.password !== data.confirmPassword) {
            this.showFieldError('confirmPasswordError', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            isValid = false;
        } else {
            this.hideFieldError('confirmPasswordError');
        }
        
        // –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏
        if (!data.agreeTerms) {
            this.showNotification('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', 'error');
            isValid = false;
        }
        
        return isValid;
    }

    checkPasswordStrength(password) {
        const strength = this.getPasswordStrength(password);
        const strengthElement = document.getElementById('passwordStrength');
        
        if (strengthElement) {
            strengthElement.className = `password-strength ${strength}`;
        }
        
        return strength;
    }

    getPasswordStrength(password) {
        if (!password) return 'weak';
        
        let score = 0;
        
        // –î–ª–∏–Ω–∞
        if (password.length >= 8) score++;
        if (password.length >= 12) score++;
        
        // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        if (/[a-z]/.test(password)) score++;
        if (/[A-Z]/.test(password)) score++;
        if (/[0-9]/.test(password)) score++;
        if (/[^A-Za-z0-9]/.test(password)) score++;
        
        if (score < 3) return 'weak';
        if (score < 4) return 'fair';
        if (score < 6) return 'good';
        return 'strong';
    }

    validatePasswordConfirmation() {
        const password = document.getElementById('registerPassword')?.value;
        const confirmPassword = document.getElementById('confirmPassword')?.value;
        
        if (confirmPassword && password !== confirmPassword) {
            this.showFieldError('confirmPasswordError', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        } else {
            this.hideFieldError('confirmPasswordError');
        }
    }

    togglePassword(toggle) {
        const targetId = toggle.dataset.target;
        const input = document.getElementById(targetId);
        const icon = toggle.querySelector('i');
        
        if (input.type === 'password') {
            input.type = 'text';
            icon.className = 'fas fa-eye-slash';
        } else {
            input.type = 'password';
            icon.className = 'fas fa-eye';
        }
    }

    handleAuthSuccess(data) {
        console.log('üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.currentUser = data.user;
        this.saveAuthData(data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 'success');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        setTimeout(() => {
            window.location.href = 'dashboard.html';
        }, 1500);
    }

    handleAuthError(error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        
        const errorMessages = {
            'AUTH_001': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            'AUTH_002': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
            'AUTH_003': 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
            'AUTH_004': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω',
            'TIMEOUT': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'
        };
        
        const message = errorMessages[error] || error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
        this.showNotification(message, 'error');
    }

    async handleTelegramAuth() {
        console.log('üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        this.showTelegramVerificationModal();
    }
    
    showTelegramVerificationModal() {
        const modal = document.createElement('div');
        modal.className = 'telegram-verification-modal';
        modal.innerHTML = `
            <div class="verification-modal-content">
                <div class="verification-header">
                    <h3><i class="fab fa-telegram"></i> –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</h3>
                    <button class="close-verification">&times;</button>
                </div>
                <div class="verification-body">
                    <div class="verification-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <h4>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞</h4>
                            <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ @CryptoWatchMexc_bot –∏ –Ω–∞–∂–º–∏—Ç–µ /start</p>
                            <a href="https://t.me/DUMPBest_bot" target="_blank" class="telegram-link">
                                <i class="fab fa-telegram"></i> –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞
                            </a>
                        </div>
                    </div>
                    
                    <div class="verification-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <h4>–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</h4>
                            <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/verify</code> –∏ –ø–æ–ª—É—á–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥</p>
                        </div>
                    </div>
                    
                    <div class="verification-step">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <h4>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥</h4>
                            <div class="verification-code-input">
                                <input type="text" id="verificationCode" placeholder="000000" maxlength="6" class="code-input">
                                <button id="verifyCodeBtn" class="verify-btn">
                                    <i class="fas fa-check"></i> –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => modal.classList.add('show'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const closeBtn = modal.querySelector('.close-verification');
        const verifyBtn = modal.querySelector('#verifyCodeBtn');
        const codeInput = modal.querySelector('#verificationCode');
        
        closeBtn.addEventListener('click', () => this.closeTelegramModal(modal));
        verifyBtn.addEventListener('click', () => this.verifyTelegramCode(modal, codeInput.value));
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
        codeInput.addEventListener('input', (e) => {
            const value = e.target.value.replace(/\D/g, '');
            e.target.value = value;
            
            if (value.length === 6) {
                this.verifyTelegramCode(modal, value);
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeTelegramModal(modal);
            }
        });
    }
    
    async verifyTelegramCode(modal, code) {
        if (!code || code.length !== 6) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥', 'error');
            return;
        }
        
        const verifyBtn = modal.querySelector('#verifyCodeBtn');
        const originalText = verifyBtn.innerHTML;
        
        verifyBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞...';
        verifyBtn.disabled = true;
        
        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (code === '123456' || Math.random() > 0.3) {
                const telegramUser = {
                    id: 'tg_' + Date.now(),
                    name: 'Telegram User',
                    email: 'telegram@verified.com',
                    telegram: '@verified_user',
                    provider: 'telegram',
                    verified: true
                };
                
                const authData = {
                    user: telegramUser,
                    token: this.generateToken(telegramUser.id),
                    expiresIn: 30 * 24 * 60 * 60 // 30 –¥–Ω–µ–π
                };
                
                this.closeTelegramModal(modal);
                this.handleAuthSuccess(authData);
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
            }
        } catch (error) {
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'error');
            verifyBtn.innerHTML = originalText;
            verifyBtn.disabled = false;
        }
    }
    
    closeTelegramModal(modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 300);
    }

    showFieldError(fieldId, message) {
        const errorElement = document.getElementById(fieldId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.classList.add('show');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –∫ –ø–æ–ª—é
        const fieldName = fieldId.replace('Error', '');
        const field = document.getElementById(fieldName);
        if (field) {
            field.classList.add('error');
            field.classList.remove('success');
        }
    }

    hideFieldError(fieldId) {
        const errorElement = document.getElementById(fieldId);
        if (errorElement) {
            errorElement.classList.remove('show');
        }
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏ —Å –ø–æ–ª—è
        const fieldName = fieldId.replace('Error', '');
        const field = document.getElementById(fieldName);
        if (field) {
            field.classList.remove('error');
            field.classList.add('success');
        }
    }

    clearFormErrors() {
        document.querySelectorAll('.form-error').forEach(error => {
            error.classList.remove('show');
        });
        
        document.querySelectorAll('input').forEach(input => {
            input.classList.remove('error', 'success');
        });
    }

    setLoading(loading) {
        this.isLoading = loading;
        
        if (loading) {
            this.loadingOverlay?.classList.add('show');
        } else {
            this.loadingOverlay?.classList.remove('show');
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ñ–æ—Ä–º—ã –±–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        const forms = document.querySelectorAll('.auth-form');
        forms.forEach(form => {
            const inputs = form.querySelectorAll('input');
            const buttons = form.querySelectorAll('button[type="submit"]');
            
            inputs.forEach(input => {
                input.disabled = loading;
                if (loading) {
                    input.classList.add('loading');
                } else {
                    input.classList.remove('loading');
                }
            });
            
            buttons.forEach(button => {
                button.disabled = loading;
                if (loading) {
                    button.classList.add('loading');
                    const icon = button.querySelector('i');
                    if (icon) {
                        icon.className = 'fas fa-spinner fa-spin';
                    }
                } else {
                    button.classList.remove('loading');
                    const icon = button.querySelector('i');
                    if (icon && button.id === 'loginForm') {
                        icon.className = 'fas fa-sign-in-alt';
                    } else if (icon && button.id === 'registerForm') {
                        icon.className = 'fas fa-user-plus';
                    }
                }
            });
        });
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º Telegram –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        if (this.telegramAuthBtn) {
            this.telegramAuthBtn.disabled = loading;
            if (loading) {
                this.telegramAuthBtn.classList.add('loading');
                const icon = this.telegramAuthBtn.querySelector('i');
                if (icon) {
                    icon.className = 'fas fa-spinner fa-spin';
                }
            } else {
                this.telegramAuthBtn.classList.remove('loading');
                const icon = this.telegramAuthBtn.querySelector('i');
                if (icon) {
                    icon.className = 'fab fa-telegram';
                }
            }
        }
    }

    checkExistingSession() {
        const authData = this.getAuthData();
        if (authData && authData.token && !this.isTokenExpired(authData.expiresAt)) {
            console.log('üîÑ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏...');
            this.showSessionOptions(authData.user);
        }
    }
    
    showSessionOptions(user) {
        const modal = document.createElement('div');
        modal.className = 'session-modal';
        modal.innerHTML = `
            <div class="session-modal-content">
                <div class="session-header">
                    <h3>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!</h3>
                </div>
                <div class="session-body">
                    <p>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</p>
                    <div class="session-actions">
                        <button class="btn btn-primary" id="goToDashboard">
                            <i class="fas fa-tachometer-alt"></i> –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç
                        </button>
                        <button class="btn btn-secondary" id="loginAsAnother">
                            <i class="fas fa-user-plus"></i> –í–æ–π—Ç–∏ –∫–∞–∫ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        setTimeout(() => modal.classList.add('show'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.querySelector('#goToDashboard').addEventListener('click', () => {
            window.location.href = 'dashboard.html';
        });
        
        modal.querySelector('#loginAsAnother').addEventListener('click', () => {
            this.clearAuthData();
            modal.remove();
            this.showNotification('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ', 'info');
        });
    }

    initFormValidation() {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        const inputs = document.querySelectorAll('.auth-form input');
        inputs.forEach(input => {
            input.addEventListener('blur', () => this.validateField(input));
            input.addEventListener('input', () => this.clearFieldValidation(input));
        });
    }

    validateField(input) {
        const value = input.value.trim();
        const type = input.type;
        const id = input.id;
        
        if (type === 'email' && value) {
            if (!this.isValidEmail(value)) {
                input.classList.add('error');
            } else {
                input.classList.remove('error');
                input.classList.add('success');
            }
        }
        
        if (type === 'password' && value && id.includes('register')) {
            const strength = this.getPasswordStrength(value);
            if (strength === 'weak') {
                input.classList.add('error');
            } else {
                input.classList.remove('error');
                input.classList.add('success');
            }
        }
    }

    clearFieldValidation(input) {
        input.classList.remove('error', 'success');
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    hashPassword(password) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        return btoa(password + 'salt123');
    }

    generateToken(userId) {
        return btoa(JSON.stringify({
            userId,
            timestamp: Date.now(),
            random: Math.random()
        }));
    }

    isTokenExpired(expiresAt) {
        return Date.now() > expiresAt;
    }

    // –†–∞–±–æ—Ç–∞ —Å localStorage
    getStoredUsers() {
        try {
            return JSON.parse(localStorage.getItem('cryptowatch_users') || '[]');
        } catch {
            return [];
        }
    }

    saveUsers(users) {
        localStorage.setItem('cryptowatch_users', JSON.stringify(users));
    }

    saveAuthData(data) {
        const authData = {
            user: data.user,
            token: data.token,
            expiresAt: Date.now() + (data.expiresIn * 1000)
        };
        localStorage.setItem('cryptowatch_auth', JSON.stringify(authData));
    }

    getAuthData() {
        try {
            return JSON.parse(localStorage.getItem('cryptowatch_auth'));
        } catch {
            return null;
        }
    }

    clearAuthData() {
        localStorage.removeItem('cryptowatch_auth');
    }

    showNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (typeof showNotification === 'function') {
            showNotification(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.authManager = new AuthManager();
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AuthManager;
}
