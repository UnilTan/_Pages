/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
 */

class CryptoDataAPI {
    constructor() {
        this.baseURL = 'https://api.binance.com/api/v3';
        this.symbol = 'BTCUSDT';
        this.previousPrice = null;
        this.priceHistory = [];
        this.updateInterval = null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ 24h —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    async getCurrentPrice() {
        try {
            console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –∫ Binance API: ${this.baseURL}/ticker/24hr?symbol=${this.symbol}`);
            
            const response = await fetch(`${this.baseURL}/ticker/24hr?symbol=${this.symbol}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                },
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Binance:', {
                symbol: data.symbol,
                price: data.lastPrice,
                change: data.priceChangePercent,
                timestamp: new Date().toLocaleTimeString()
            });
            
            const processedData = {
                symbol: data.symbol,
                price: parseFloat(data.lastPrice),
                change24h: parseFloat(data.priceChangePercent),
                changeAmount: parseFloat(data.priceChange),
                volume: parseFloat(data.volume),
                high24h: parseFloat(data.highPrice),
                low24h: parseFloat(data.lowPrice),
                openPrice: parseFloat(data.openPrice),
                count: parseInt(data.count),
                timestamp: Date.now(),
                rawData: data // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            };
            
            return processedData;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API');
            return this.getFallbackData();
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
     */
    getFallbackData() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC
        const basePrice = 63000; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ BTC
        const variation = (Math.random() - 0.5) * 2000; // ¬±1000
        const currentPrice = basePrice + variation;
        const change24h = (Math.random() - 0.5) * 10; // ¬±5%
        
        return {
            symbol: 'BTCUSDT',
            price: currentPrice,
            change24h: change24h,
            changeAmount: (currentPrice * change24h) / 100,
            volume: 25000 + Math.random() * 10000,
            high24h: currentPrice * 1.05,
            low24h: currentPrice * 0.95,
            openPrice: currentPrice - (currentPrice * change24h) / 100,
            count: 1000000,
            timestamp: Date.now(),
            isFallback: true
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    async getKlineData(interval = '1h', limit = 100) {
        try {
            const response = await fetch(`${this.baseURL}/klines?symbol=${this.symbol}&interval=${interval}&limit=${limit}`);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
            
            const data = await response.json();
            return data.map(kline => ({
                openTime: kline[0],
                open: parseFloat(kline[1]),
                high: parseFloat(kline[2]),
                low: parseFloat(kline[3]),
                close: parseFloat(kline[4]),
                volume: parseFloat(kline[5]),
                closeTime: kline[6]
            }));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            return [];
        }
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI (Relative Strength Index)
     */
    calculateRSI(prices, period = 14) {
        if (prices.length < period + 1) return null;

        let gains = [];
        let losses = [];

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        for (let i = 1; i < prices.length; i++) {
            const change = prices[i] - prices[i - 1];
            gains.push(change > 0 ? change : 0);
            losses.push(change < 0 ? Math.abs(change) : 0);
        }

        // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–µ–π –∏ —É–±—ã—Ç–∫–æ–≤
        let avgGain = gains.slice(0, period).reduce((a, b) => a + b) / period;
        let avgLoss = losses.slice(0, period).reduce((a, b) => a + b) / period;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        for (let i = period; i < gains.length; i++) {
            avgGain = (avgGain * (period - 1) + gains[i]) / period;
            avgLoss = (avgLoss * (period - 1) + losses[i]) / period;
        }

        if (avgLoss === 0) return 100;
        const rs = avgGain / avgLoss;
        return 100 - (100 / (1 + rs));
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é (SMA)
     */
    calculateSMA(prices, period) {
        if (prices.length < period) return null;
        const sum = prices.slice(-period).reduce((a, b) => a + b);
        return sum / period;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é (EMA)
     */
    calculateEMA(prices, period) {
        if (prices.length < period) return null;
        
        const multiplier = 2 / (period + 1);
        let ema = prices.slice(0, period).reduce((a, b) => a + b) / period;
        
        for (let i = period; i < prices.length; i++) {
            ema = (prices[i] * multiplier) + (ema * (1 - multiplier));
        }
        
        return ema;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å MACD
     */
    calculateMACD(prices, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {
        const fastEMA = this.calculateEMA(prices, fastPeriod);
        const slowEMA = this.calculateEMA(prices, slowPeriod);
        
        if (!fastEMA || !slowEMA) return null;
        
        const macdLine = fastEMA - slowEMA;
        
        // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ MACD –ª–∏–Ω–∏—é
        return {
            macd: macdLine,
            signal: macdLine > 0 ? '–ë—ã—á–∏–π' : '–ú–µ–¥–≤–µ–∂–∏–π',
            histogram: macdLine
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
     */
    calculateSignalQuality(rsi, macd, volumeRatio) {
        let quality = 50; // –ë–∞–∑–æ–≤–æ–µ quality

        // RSI –∞–Ω–∞–ª–∏–∑
        if (rsi) {
            if (rsi > 70) quality += 10; // –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
            if (rsi < 30) quality += 10; // –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –æ—Ç—Å–∫–æ–∫
            if (rsi >= 40 && rsi <= 60) quality += 15; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        }

        // MACD –∞–Ω–∞–ª–∏–∑
        if (macd && macd.macd > 0) quality += 15;

        // –û–±—ä–µ–º
        if (volumeRatio > 1.5) quality += 10; // –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º

        return Math.min(Math.max(quality, 0), 100);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–ª–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å
     */
    calculateTargets(currentPrice, change24h, signalQuality) {
        const baseMultiplier = signalQuality / 100;
        const volatilityFactor = Math.abs(change24h) / 100;
        
        // –¶–µ–ª–∏ (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        const target1 = currentPrice * (1 + (0.02 + volatilityFactor) * baseMultiplier);
        const target2 = currentPrice * (1 + (0.04 + volatilityFactor * 1.5) * baseMultiplier);
        const target3 = currentPrice * (1 + (0.06 + volatilityFactor * 2) * baseMultiplier);
        
        // –°—Ç–æ–ø-–ª–æ—Å—Å
        const stopLoss = currentPrice * (1 - (0.03 + volatilityFactor * 0.5));
        
        return {
            targets: [target1, target2, target3],
            stopLoss: stopLoss
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    async getFullData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            const currentData = await this.getCurrentPrice();
            if (!currentData) return null;

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            const klineData = await this.getKlineData('1h', 100);
            if (klineData.length === 0) return null;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            const closePrices = klineData.map(k => k.close);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            const rsi = this.calculateRSI(closePrices);
            const macd = this.calculateMACD(closePrices);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
            const volumeRatio = currentData.volume / (klineData[0].volume || 1);
            const signalQuality = this.calculateSignalQuality(rsi, macd, volumeRatio);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–∏
            const targets = this.calculateTargets(currentData.price, currentData.change24h, signalQuality);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            this.previousPrice = this.previousPrice || currentData.openPrice;
            
            return {
                symbol: currentData.symbol,
                currentPrice: currentData.price,
                previousPrice: this.previousPrice,
                change24h: currentData.change24h,
                rsi: rsi,
                macd: macd,
                signalQuality: signalQuality,
                targets: targets,
                volume: currentData.volume,
                timestamp: Date.now()
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    startRealTimeUpdates(callback, interval = 30000) {
        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        this.updateData(callback);
        
        // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ interval –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        this.updateInterval = setInterval(() => {
            this.updateData(callback);
        }, interval);
        
        console.log(`üîÑ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${interval/1000} —Å–µ–∫—É–Ω–¥`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    stopRealTimeUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
     */
    async updateData(callback) {
        const data = await this.getFullData();
        if (data && callback) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.previousPrice = data.currentPrice;
            callback(data);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.CryptoDataAPI = CryptoDataAPI;
