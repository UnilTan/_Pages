/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
 */

class BotDataAPI {
    constructor() {
        this.botAPI = 'http://localhost:8000/api';
        this.websiteAPI = 'http://localhost:5000/api';
        this.updateInterval = null;
        this.callbacks = {
            signals: [],
            trades: [],
            analytics: [],
            hotCoins: []
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –±–æ—Ç–∞
     */
    async getSignals() {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –±–æ—Ç–∞
            let response = await fetch(`${this.botAPI}/signals`);
            
            if (!response.ok) {
                // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ website API
                response = await fetch(`${this.websiteAPI}/bot/signals`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('auth_token') || 'demo'}`
                    }
                });
            }
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –±–æ—Ç–∞:', data);
            
            return {
                success: true,
                data: data.signals || data.data?.signals || [],
                demo: data.demo || false
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                success: false,
                data: this.getDemoSignals(),
                demo: true,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –æ—Ç –±–æ—Ç–∞
     */
    async getTrades() {
        try {
            let response = await fetch(`${this.botAPI}/trades`);
            
            if (!response.ok) {
                response = await fetch(`${this.websiteAPI}/bot/trades`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('auth_token') || 'demo'}`
                    }
                });
            }
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            console.log('üìà –ü–æ–ª—É—á–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –æ—Ç –±–æ—Ç–∞:', data);
            
            return {
                success: true,
                data: data.trades || data.data?.trades || [],
                demo: data.demo || false
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:', error);
            
            return {
                success: false,
                data: this.getDemoTrades(),
                demo: true,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –º–æ–Ω–µ—Ç –æ—Ç –±–æ—Ç–∞
     */
    async getHotCoins() {
        try {
            let response = await fetch(`${this.botAPI}/hot-coins`);
            
            if (!response.ok) {
                response = await fetch(`${this.websiteAPI}/bot/hot-coins`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('auth_token') || 'demo'}`
                    }
                });
            }
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            console.log('üî• –ü–æ–ª—É—á–µ–Ω—ã –≥–æ—Ä—è—á–∏–µ –º–æ–Ω–µ—Ç—ã –æ—Ç –±–æ—Ç–∞:', data);
            
            return {
                success: true,
                data: data.coins || data.data?.coins || [],
                demo: data.demo || false
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –º–æ–Ω–µ—Ç:', error);
            
            return {
                success: false,
                data: this.getDemoHotCoins(),
                demo: true,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
     */
    async getAnalytics() {
        try {
            let response = await fetch(`${this.botAPI}/analytics`);
            
            if (!response.ok) {
                response = await fetch(`${this.websiteAPI}/bot/analytics`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('auth_token') || 'demo'}`
                    }
                });
            }
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            console.log('üìä –ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç –±–æ—Ç–∞:', data);
            
            return {
                success: true,
                data: data.data || data,
                demo: data.demo || false
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            
            return {
                success: false,
                data: this.getDemoAnalytics(),
                demo: true,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –±–æ—Ç–∞
     */
    async getStats() {
        try {
            let response = await fetch(`${this.botAPI}/stats`);
            
            if (!response.ok) {
                response = await fetch(`${this.websiteAPI}/dashboard/stats`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('auth_token') || 'demo'}`
                    }
                });
            }
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            console.log('üìà –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç –±–æ—Ç–∞:', data);
            
            return {
                success: true,
                data: data.data || data,
                demo: data.demo || false
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            
            return {
                success: false,
                data: this.getDemoStats(),
                demo: true,
                error: error.message
            };
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    startRealTimeUpdates(interval = 30000) {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...');
        
        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        this.updateAllData();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.updateInterval = setInterval(() => {
            this.updateAllData();
        }, interval);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    stopRealTimeUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async updateAllData() {
        try {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [signals, trades, hotCoins, analytics, stats] = await Promise.all([
                this.getSignals(),
                this.getTrades(), 
                this.getHotCoins(),
                this.getAnalytics(),
                this.getStats()
            ]);

            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            this.callbacks.signals.forEach(callback => callback(signals));
            this.callbacks.trades.forEach(callback => callback(trades));
            this.callbacks.hotCoins.forEach(callback => callback(hotCoins));
            this.callbacks.analytics.forEach(callback => callback(analytics));
            this.callbacks.stats.forEach(callback => callback(stats));
            
            console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    onSignalsUpdate(callback) {
        this.callbacks.signals.push(callback);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
     */
    onTradesUpdate(callback) {
        this.callbacks.trades.push(callback);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –º–æ–Ω–µ—Ç
     */
    onHotCoinsUpdate(callback) {
        this.callbacks.hotCoins.push(callback);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    onAnalyticsUpdate(callback) {
        this.callbacks.analytics.push(callback);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    onStatsUpdate(callback) {
        this.callbacks.stats.push(callback);
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
    getDemoSignals() {
        return [
            {
                pair: 'BTC',
                change: '+8.5%',
                type: 'pump',
                timestamp: Date.now() - 300000,
                quality: 'high',
                status: 'active'
            },
            {
                pair: 'ETH',
                change: '-6.2%',
                type: 'dump',
                timestamp: Date.now() - 600000,
                quality: 'medium',
                status: 'active'
            }
        ];
    }

    getDemoTrades() {
        return [
            {
                pair: 'BTC',
                result: 'profit',
                amount: '+$245.50',
                timestamp: Date.now() - 3600000
            },
            {
                pair: 'ETH',
                result: 'loss',
                amount: '-$89.20',
                timestamp: Date.now() - 7200000
            }
        ];
    }

    getDemoHotCoins() {
        return [
            { symbol: 'DOGE', change: '+15.8%' },
            { symbol: 'SHIB', change: '+12.4%' },
            { symbol: 'PEPE', change: '+9.7%' },
            { symbol: 'FLOKI', change: '+8.2%' }
        ];
    }

    getDemoAnalytics() {
        const labels = [];
        const data = [];
        
        for (let i = 0; i < 7; i++) {
            const date = new Date();
            date.setDate(date.getDate() - (6 - i));
            labels.push(date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' }));
            data.push({
                profit: Math.round((i * 2.5 + 5) * (1 + (i % 3 - 1) * 0.2) * 10) / 10,
                accuracy: Math.round(75 + i * 3 + (i % 2) * 5)
            });
        }
        
        return {
            total_signals: 1247,
            success_rate: 87.3,
            today_signals: 23,
            chart_data: {
                labels: labels,
                data: data
            }
        };
    }

    getDemoStats() {
        return {
            total_signals: 1247,
            success_rate: 87.3,
            today_signals: 23,
            total_profit: 2450.75,
            active_signals: 12,
            avg_profit: 3.2,
            win_count: 1089,
            loss_count: 158
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.botDataAPI = new BotDataAPI();
