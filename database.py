"""
üîê –°–∏—Å—Ç–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è CryptoWatch MEXC
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import hashlib
import secrets
import json
import os
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64

class EncryptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, password: str):
        self.password = password.encode()
        self.salt = b'cryptowatch_mexc_salt_2024'  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º
        self.fernet = self._create_fernet()
    
    def _create_fernet(self) -> Fernet:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Fernet –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=self.salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(self.password))
        return Fernet(key)
    
    def encrypt(self, data: str) -> str:
        """–®–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É"""
        return self.fernet.encrypt(data.encode()).decode()
    
    def decrypt(self, encrypted_data: str) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É"""
        return self.fernet.decrypt(encrypted_data.encode()).decode()
    
    def encrypt_dict(self, data: Dict[str, Any]) -> str:
        """–®–∏—Ñ—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∫–∞–∫ JSON"""
        json_data = json.dumps(data, ensure_ascii=False)
        return self.encrypt(json_data)
    
    def decrypt_dict(self, encrypted_data: str) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ JSON"""
        json_data = self.decrypt(encrypted_data)
        return json.loads(json_data)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, db_path: str = "data/users.db", encryption_key: str = "default_key_2024"):
        self.db_path = db_path
        self.encryption = EncryptionManager(encryption_key)
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(self.db_path) if os.path.dirname(self.db_path) else '.', exist_ok=True)
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    salt TEXT NOT NULL,
                    encrypted_data TEXT NOT NULL,
                    telegram_id TEXT,
                    is_active BOOLEAN DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_login TIMESTAMP,
                    login_attempts INTEGER DEFAULT 0,
                    locked_until TIMESTAMP
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS sessions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    token_hash TEXT UNIQUE NOT NULL,
                    encrypted_data TEXT NOT NULL,
                    expires_at TIMESTAMP NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    ip_address TEXT,
                    user_agent TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_trading_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    encrypted_data TEXT NOT NULL,
                    data_type TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_settings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER UNIQUE NOT NULL,
                    encrypted_settings TEXT NOT NULL,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS security_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    event_type TEXT NOT NULL,
                    event_data TEXT,
                    ip_address TEXT,
                    user_agent TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
            """)
            
            conn.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _hash_password(self, password: str, salt: str = None) -> tuple[str, str]:
        """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å —Å–æ–ª—å—é"""
        if salt is None:
            salt = secrets.token_hex(32)
        
        password_hash = hashlib.pbkdf2_hmac(
            'sha256',
            password.encode('utf-8'),
            salt.encode('utf-8'),
            100000  # 100k –∏—Ç–µ—Ä–∞—Ü–∏–π
        )
        
        return base64.b64encode(password_hash).decode('utf-8'), salt
    
    def _verify_password(self, password: str, password_hash: str, salt: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å"""
        test_hash, _ = self._hash_password(password, salt)
        return test_hash == password_hash
    
    def _generate_token(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏"""
        return secrets.token_urlsafe(32)
    
    def _hash_token(self, token: str) -> str:
        """–•–µ—à–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        return hashlib.sha256(token.encode()).hexdigest()
    
    def create_user(self, email: str, password: str, name: str, telegram_id: str = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor.execute("SELECT id FROM users WHERE email = ?", (email,))
                if cursor.fetchone():
                    return {
                        'success': False,
                        'error': 'AUTH_003',
                        'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                    }
                
                # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                password_hash, salt = self._hash_password(password)
                
                # –®–∏—Ñ—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                user_data = {
                    'name': name,
                    'email': email,
                    'telegram_id': telegram_id,
                    'preferences': {
                        'notifications': True,
                        'sound': True,
                        'signal_threshold': '7',
                        'auto_refresh': '60'
                    }
                }
                encrypted_data = self.encryption.encrypt_dict(user_data)
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("""
                    INSERT INTO users (email, password_hash, salt, encrypted_data, telegram_id, created_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (email, password_hash, salt, encrypted_data, telegram_id, datetime.now()))
                
                user_id = cursor.lastrowid
                
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                default_settings = {
                    'notifications_enabled': True,
                    'sound_enabled': True,
                    'signal_threshold': 7,
                    'auto_refresh_interval': 60,
                    'theme': 'light'
                }
                encrypted_settings = self.encryption.encrypt_dict(default_settings)
                
                cursor.execute("""
                    INSERT INTO user_settings (user_id, encrypted_settings)
                    VALUES (?, ?)
                """, (user_id, encrypted_settings))
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                self._log_security_event(user_id, 'USER_CREATED', {'email': email})
                
                conn.commit()
                
                return {
                    'success': True,
                    'data': {
                        'user_id': user_id,
                        'email': email,
                        'name': name
                    }
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {
                'success': False,
                'error': 'DATABASE_ERROR',
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }
    
    def authenticate_user(self, email: str, password: str, ip_address: str = None, user_agent: str = None) -> Dict[str, Any]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("""
                    SELECT id, password_hash, salt, encrypted_data, is_active, 
                           login_attempts, locked_until
                    FROM users WHERE email = ?
                """, (email,))
                
                user_row = cursor.fetchone()
                if not user_row:
                    self._log_security_event(None, 'LOGIN_FAILED', {
                        'email': email, 'reason': 'user_not_found'
                    }, ip_address, user_agent)
                    return {
                        'success': False,
                        'error': 'AUTH_001',
                        'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                    }
                
                user_id, password_hash, salt, encrypted_data, is_active, login_attempts, locked_until = user_row
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                if locked_until and datetime.fromisoformat(locked_until) > datetime.now():
                    self._log_security_event(user_id, 'LOGIN_BLOCKED', {
                        'reason': 'account_locked', 'locked_until': locked_until
                    }, ip_address, user_agent)
                    return {
                        'success': False,
                        'error': 'AUTH_005',
                        'message': '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                    }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
                if not is_active:
                    self._log_security_event(user_id, 'LOGIN_FAILED', {
                        'reason': 'account_inactive'
                    }, ip_address, user_agent)
                    return {
                        'success': False,
                        'error': 'AUTH_006',
                        'message': '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
                    }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                if not self._verify_password(password, password_hash, salt):
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                    new_attempts = login_attempts + 1
                    locked_until_time = None
                    
                    if new_attempts >= 5:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                        locked_until_time = datetime.now() + timedelta(minutes=30)
                        cursor.execute("""
                            UPDATE users SET login_attempts = ?, locked_until = ?
                            WHERE id = ?
                        """, (new_attempts, locked_until_time, user_id))
                    else:
                        cursor.execute("""
                            UPDATE users SET login_attempts = ?
                            WHERE id = ?
                        """, (new_attempts, user_id))
                    
                    conn.commit()
                    
                    self._log_security_event(user_id, 'LOGIN_FAILED', {
                        'reason': 'wrong_password', 'attempts': new_attempts
                    }, ip_address, user_agent)
                    
                    return {
                        'success': False,
                        'error': 'AUTH_002',
                        'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
                    }
                
                # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                cursor.execute("""
                    UPDATE users SET login_attempts = 0, locked_until = NULL, last_login = ?
                    WHERE id = ?
                """, (datetime.now(), user_id))
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = self.encryption.decrypt_dict(encrypted_data)
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                token = self._generate_token()
                token_hash = self._hash_token(token)
                expires_at = datetime.now() + timedelta(days=7)  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π
                
                session_data = {
                    'user_id': user_id,
                    'email': email,
                    'created_at': datetime.now().isoformat(),
                    'ip_address': ip_address,
                    'user_agent': user_agent
                }
                encrypted_session = self.encryption.encrypt_dict(session_data)
                
                cursor.execute("""
                    INSERT INTO sessions (user_id, token_hash, encrypted_data, expires_at, ip_address, user_agent)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (user_id, token_hash, encrypted_session, expires_at, ip_address, user_agent))
                
                conn.commit()
                
                self._log_security_event(user_id, 'LOGIN_SUCCESS', {
                    'session_created': True
                }, ip_address, user_agent)
                
                return {
                    'success': True,
                    'data': {
                        'user': {
                            'id': user_id,
                            'name': user_data['name'],
                            'email': user_data['email'],
                            'telegram_id': user_data.get('telegram_id')
                        },
                        'token': token,
                        'expires_at': expires_at.isoformat()
                    }
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': 'DATABASE_ERROR',
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
            }
    
    def validate_session(self, token: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                token_hash = self._hash_token(token)
                
                cursor.execute("""
                    SELECT s.user_id, s.encrypted_data, s.expires_at, u.encrypted_data
                    FROM sessions s
                    JOIN users u ON s.user_id = u.id
                    WHERE s.token_hash = ? AND s.expires_at > ? AND u.is_active = 1
                """, (token_hash, datetime.now()))
                
                session_row = cursor.fetchone()
                if not session_row:
                    return {
                        'success': False,
                        'error': 'AUTH_004',
                        'message': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                    }
                
                user_id, session_encrypted_data, expires_at, user_encrypted_data = session_row
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                cursor.execute("""
                    UPDATE sessions SET last_activity = ?
                    WHERE token_hash = ?
                """, (datetime.now(), token_hash))
                
                conn.commit()
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                session_data = self.encryption.decrypt_dict(session_encrypted_data)
                user_data = self.encryption.decrypt_dict(user_encrypted_data)
                
                return {
                    'success': True,
                    'data': {
                        'user': {
                            'id': user_id,
                            'name': user_data['name'],
                            'email': user_data['email'],
                            'telegram_id': user_data.get('telegram_id')
                        },
                        'session': session_data
                    }
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return {
                'success': False,
                'error': 'DATABASE_ERROR',
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏'
            }
    
    def logout_user(self, token: str) -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                token_hash = self._hash_token(token)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                cursor.execute("""
                    SELECT user_id FROM sessions WHERE token_hash = ?
                """, (token_hash,))
                
                session_row = cursor.fetchone()
                if session_row:
                    user_id = session_row[0]
                    
                    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
                    cursor.execute("DELETE FROM sessions WHERE token_hash = ?", (token_hash,))
                    conn.commit()
                    
                    self._log_security_event(user_id, 'LOGOUT', {'session_ended': True})
                    
                    return {
                        'success': True,
                        'message': '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
                    }
                else:
                    return {
                        'success': False,
                        'error': 'AUTH_004',
                        'message': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                    }
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return {
                'success': False,
                'error': 'DATABASE_ERROR',
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏'
            }
    
    def save_user_trading_data(self, user_id: int, data_type: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                encrypted_data = self.encryption.encrypt_dict(data)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                cursor.execute("""
                    SELECT id FROM user_trading_data 
                    WHERE user_id = ? AND data_type = ?
                """, (user_id, data_type))
                
                existing_row = cursor.fetchone()
                
                if existing_row:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    cursor.execute("""
                        UPDATE user_trading_data 
                        SET encrypted_data = ?, updated_at = ?
                        WHERE user_id = ? AND data_type = ?
                    """, (encrypted_data, datetime.now(), user_id, data_type))
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    cursor.execute("""
                        INSERT INTO user_trading_data (user_id, encrypted_data, data_type)
                        VALUES (?, ?, ?)
                    """, (user_id, encrypted_data, data_type))
                
                conn.commit()
                
                return {
                    'success': True,
                    'message': '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                'success': False,
                'error': 'DATABASE_ERROR',
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
            }
    
    def get_user_trading_data(self, user_id: int, data_type: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if data_type:
                    cursor.execute("""
                        SELECT encrypted_data, data_type, updated_at
                        FROM user_trading_data 
                        WHERE user_id = ? AND data_type = ?
                        ORDER BY updated_at DESC
                    """, (user_id, data_type))
                else:
                    cursor.execute("""
                        SELECT encrypted_data, data_type, updated_at
                        FROM user_trading_data 
                        WHERE user_id = ?
                        ORDER BY updated_at DESC
                    """, (user_id,))
                
                rows = cursor.fetchall()
                
                if not rows:
                    return {
                        'success': True,
                        'data': {}
                    }
                
                result = {}
                for encrypted_data, dtype, updated_at in rows:
                    decrypted_data = self.encryption.decrypt_dict(encrypted_data)
                    result[dtype] = {
                        'data': decrypted_data,
                        'updated_at': updated_at
                    }
                
                return {
                    'success': True,
                    'data': result
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                'success': False,
                'error': 'DATABASE_ERROR',
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
            }
    
    def _log_security_event(self, user_id: Optional[int], event_type: str, event_data: Dict[str, Any] = None, 
                          ip_address: str = None, user_agent: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    INSERT INTO security_logs (user_id, event_type, event_data, ip_address, user_agent)
                    VALUES (?, ?, ?, ?, ?)
                """, (user_id, event_type, json.dumps(event_data) if event_data else None, 
                      ip_address, user_agent))
                
                conn.commit()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def cleanup_expired_sessions(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    DELETE FROM sessions WHERE expires_at < ?
                """, (datetime.now(),))
                
                deleted_count = cursor.rowcount
                conn.commit()
                
                if deleted_count > 0:
                    print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = DatabaseManager()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = db.create_user(
        email="test@example.com",
        password="test123456",
        name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        telegram_id="@testuser"
    )
    print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", result)
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth_result = db.authenticate_user(
        email="test@example.com",
        password="test123456",
        ip_address="127.0.0.1"
    )
    print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:", auth_result)
    
    if auth_result['success']:
        token = auth_result['data']['token']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        session_result = db.validate_session(token)
        print("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏:", session_result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        trading_data = {
            'signals': [
                {'pair': 'BTC/USDT', 'change': '+5.2%', 'timestamp': datetime.now().isoformat()}
            ],
            'total_profit': 1250.75,
            'win_rate': 87.3
        }
        
        save_result = db.save_user_trading_data(
            user_id=auth_result['data']['user']['id'],
            data_type='daily_stats',
            data=trading_data
        )
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:", save_result)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        get_result = db.get_user_trading_data(
            user_id=auth_result['data']['user']['id']
        )
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:", get_result)
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
    db.cleanup_expired_sessions()
